;;; Environment
(set-language-environment "UTF-8")

(setq custom-file "~/.emacs-custom.el")
(load custom-file)

(require 'package)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)

;; Confirm before exiting
(setq confirm-kill-emacs 'y-or-n-p)

;; indent with spaces
(setq-default indent-tabs-mode nil)

;; ag
(setq ag-highlight-search t)
(setq ag-reuse-window t)

;; autopair
(use-package autopair
  :ensure t
  :init (autopair-global-mode))

;; Flycheck
(use-package flycheck
  :ensure t
  :init (global-flycheck-mode))

(setq-default flycheck-disabled-checkers '(php-phpmd))
(add-hook 'flycheck-mode-hook #'flycheck-rust-setup)

;; Browse-URL
(setq browse-url-browser-function 'browse-url-chromium)

;;; Display
(setq inhibit-splash-screen t
      initial-scratch-message nil)

(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)

(column-number-mode t)
(display-time-mode t)
(show-paren-mode t)

(setq truncate-partial-width-windows nil)
(setq-default show-trailing-whitespace t)


;;; Shortcuts
;; general
(global-set-key (kbd "C-c o") 'bury-buffer)
(global-set-key (kbd "C-c k") 'kill-this-buffer)
(global-set-key (kbd "C-c c") 'compile)
(global-set-key (kbd "C-c g") 'gdb)
(global-set-key (kbd "C-c s") 'eshell)
(global-set-key (kbd "C-c i") 'erc)
(global-set-key (kbd "C-c a") 'ag)
(global-set-key (kbd "C-c r") 'revert-buffer)
(global-set-key (kbd "C-c w") 'whitespace-mode)


;;; Programming

;; C mode
(dtrt-indent-mode t)
(setq dtrt-indent-active-mode-line-info nil)
(setq c-default-style "linux")
(setq c-basic-offset 4)

;; Javascript mode
(setq js-indent-level 4)

;; PHP mode
(defun abusque-php-hook ()
  "My default PHP config."
  (setq indent-tabs-mode nil
        tab-width 2
        c-basic-offset 4
        flycheck-phpcs-standard "~/devsea/backend/.lint/phpcs-config-devsea.xml")
    (c-set-offset 'case-label '+))
(add-hook 'php-mode-hook 'abusque-php-hook)

;; Python mode
(defun abusque-python-hook ()
  "My default Python config."
  (setq flycheck-checker 'python-pylint))
(add-hook 'python-mode-hook 'abusque-python-hook)

;; web-mode
(require 'web-mode)
(defun abusque-web-hook ()
  "My default web-mode config."
  (setq web-mode-enable-auto-pairing nil
        web-mode-markup-indent-offset 2
        web-mode-css-indent-offset 2))
(setq web-mode-engines-alist '(("underscorejs" . "\\.template.html\\'")))
(add-to-list 'auto-mode-alist '("\\.css$" . web-mode))
(add-to-list 'auto-mode-alist '("\\.scss$" . web-mode))
(add-to-list 'auto-mode-alist '("\\.twig$" . web-mode))
(add-to-list 'auto-mode-alist '("\\.mustache$" . web-mode))
(add-to-list 'auto-mode-alist '("\\.jinja2$" . web-mode))
(add-hook 'web-mode-hook 'abusque-web-hook)

;; irfc-mode
(add-to-list 'auto-mode-alist '("rfc[0-9]+\\.txt" . irfc-mode))

;;; Ido
(ido-mode t)
(ido-everywhere t)
(setq ido-enable-flex-matching t)


;;; Backup and temp files

;; Place backups/auto-saves in /tmp
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))

;; Disable file locks
(setq create-lockfiles nil)


;;; Others
(defalias 'yes-or-no-p 'y-or-n-p)

(auto-compression-mode 1)

(setq x-select-enable-clipboard t)
(put 'upcase-region 'disabled nil)
